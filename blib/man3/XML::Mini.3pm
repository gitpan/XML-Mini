.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Mini 3"
.TH XML::Mini 3 "2006-11-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
XML::Mini \- Perl implementation of the XML::Mini XML create/parse interface.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use XML::Mini::Document;
.Ve
.PP
.Vb 1
\&        use Data::Dumper;
.Ve
.PP
.Vb 1
\&        ###### PARSING XML #######
.Ve
.PP
.Vb 2
\&        # create a new object
\&        my $xmlDoc = XML::Mini::Document->new();
.Ve
.PP
.Vb 2
\&        # init the doc from an XML string
\&        $xmlDoc->parse($XMLString);
.Ve
.PP
.Vb 3
\&        # You may use the toHash() method to automatically
\&        # convert the XML into a hash reference
\&        my $xmlHash = $xmlDoc->toHash();
.Ve
.PP
.Vb 1
\&        print Dumper($xmlHash);
.Ve
.PP
.Vb 1
\&        # You can also manipulate the elements like directly, like this:
.Ve
.PP
.Vb 3
\&        # Fetch the ROOT element for the document
\&        # (an instance of XML::Mini::Element)
\&        my $xmlRoot = $xmlDoc->getRoot();
.Ve
.PP
.Vb 3
\&        # play with the element and its children
\&        # ...
\&        my $topLevelChildren = $xmlRoot->getAllChildren();
.Ve
.PP
.Vb 4
\&        foreach my $childElement (@{$topLevelChildren})
\&        {
\&                # ...
\&        }
.Ve
.PP
.Vb 1
\&        ###### CREATING XML #######
.Ve
.PP
.Vb 1
\&        # Create a new document from scratch
.Ve
.PP
.Vb 1
\&        my $newDoc = XML::Mini::Document->new();
.Ve
.PP
.Vb 10
\&        # This can be done easily by using a hash:
\&        my $h = {       
\&         'spy'  => {
\&                'id'    => '007',
\&                'type'  => 'SuperSpy',
\&                'name'  => 'James Bond',
\&                'email' => 'mi5@london.uk',
\&                'address'       => 'Wherever he is needed most',
\&                },
\&        };
.Ve
.PP
.Vb 1
\&        $newDoc->fromHash($h);
.Ve
.PP
.Vb 2
\&        # Or new XML can also be created by manipulating 
\&        #elements directly:
.Ve
.PP
.Vb 1
\&        my $newDocRoot = $newDoc->getRoot();
.Ve
.PP
.Vb 4
\&        # create the <? xml ?> header
\&        my $xmlHeader = $newDocRoot->header('xml');
\&        # add the version 
\&        $xmlHeader->attribute('version', '1.0');
.Ve
.PP
.Vb 1
\&        my $person = $newDocRoot->createChild('person');
.Ve
.PP
.Vb 3
\&        my $name = $person->createChild('name');
\&        $name->createChild('first')->text('John');
\&        $name->createChild('last')->text('Doe');
.Ve
.PP
.Vb 3
\&        my $eyes = $person->createChild('eyes');
\&        $eyes->attribute('color', 'blue');
\&        $eyes->attribute('number', 2);
.Ve
.PP
.Vb 2
\&        # output the document
\&        print $newDoc->toString();
.Ve
.PP
This example would output :
.PP
.Vb 12
\& <?xml version="1.0"?>
\&  <person>
\&   <name>
\&    <first>
\&     John
\&    </first>
\&    <last>
\&     Doe
\&    </last>
\&  </name>
\&  <eyes color="blue" number="2" />
\&  </person>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::Mini is a set of Perl classes that allow you to access \s-1XML\s0 data and create valid \s-1XML\s0 output with a tree-based hierarchy of elements.  The MiniXML \s-1API\s0 has both Perl and \s-1PHP\s0 implementations.
.PP
It provides an easy, object-oriented interface for manipulating \s-1XML\s0 documents and their elements.  It is currently being used to send requests and understand responses from remote servers in Perl or \s-1PHP\s0 applications.  An XML::Mini based parser is now being tested within the \s-1RPC::XML\s0 framework.
.PP
XML::Mini does not require any external libraries or modules and is pure Perl.  If available, XML::Mini will use the Text::Balanced module in order to escape limitations of the regex-only approach (eg \*(L"cross\-nested\*(R" tag parsing).
.PP
The Mini.pm module includes a number of variables you may use to tweak XML::Mini's behavior.  These include:
.PP
$XML::Mini::AutoEscapeEntities \- when greater than 0, the values set for nodes are automatically escaped, thus
\&\f(CW$element\fR\->text('4 is > 3') will set the contents of the appended node to '4 is &gt; 3'.  Default setting is 1.
.PP
$XML::Mini::IgnoreWhitespaces \- when greater than 0, extraneous whitespaces will be ignored (maily useful when parsing).  Thus
<mytag>       Hello There        </mytag> will be parsed as containing a text node with contents 'Hello There' instead 
of '       Hello There        '.  Default setting is 1.
.PP
$XML::Mini::CaseSensitive \- when greater than 0, element names are treated as case sensitive.  Thus, \f(CW$element\fR\->getElement('subelement') and \f(CW$element\fR\->getElement('SubElement') will be equivalent.  Defaults to 0.
.SH "Class methods"
.IX Header "Class methods"
.Sh "escapeEntites \s-1TOENCODE\s0"
.IX Subsection "escapeEntites TOENCODE"
This method returns ToENCODE with \s-1HTML\s0 sensitive values
(eg '<', '>', '"', etc) \s-1HTML\s0 encoded.
.Sh "Log \s-1MESSAGE\s0"
.IX Subsection "Log MESSAGE"
Logs the message to \s-1STDERR\s0
.Sh "Error \s-1MESSAGE\s0"
.IX Subsection "Error MESSAGE"
Logs \s-1MESSAGE\s0 and exits the program, calling \fIexit()\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2002\-2003 Patrick Deegan, Psychogenic Inc.
.PP
Programs that use this code are bound to the terms and conditions of the \s-1GNU\s0 \s-1GPL\s0 (see the \s-1LICENSE\s0 file). 
If you wish to include these modules in non-GPL code, you need prior written authorisation 
from the authors.
.PP
\&\s-1LICENSE\s0
.PP
.Vb 3
\&    XML::Mini module, part of the XML::Mini XML parser/generator package.
\&    Copyright (C) 2002, 2003 Patrick Deegan, Psychogenic.com
\&    All rights reserved
.Ve
.PP
.Vb 4
\&    This program is free software; you can redistribute it and/or modify
\&    it under the terms of the GNU General Public License as published by
\&    the Free Software Foundation; either version 2 of the License, or
\&    (at your option) any later version.
.Ve
.PP
.Vb 4
\&    This program is distributed in the hope that it will be useful,
\&    but WITHOUT ANY WARRANTY; without even the implied warranty of
\&    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\&    GNU General Public License for more details.
.Ve
.PP
.Vb 3
\&    You should have received a copy of the GNU General Public License
\&    along with this program; if not, write to the Free Software
\&    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
.Ve
.PP
Official XML::Mini site: http://minixml.psychogenic.com
.PP
Contact page for author available at http://www.psychogenic.com/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::Mini::Document, XML::Mini::Element
.PP
http://minixml.psychogenic.com
